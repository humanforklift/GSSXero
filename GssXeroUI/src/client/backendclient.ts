/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.0.0 (NJsonSchema v10.3.0.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class ClientClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44306";
    }

    getClients(): Promise<ClientResponse[]> {
        let url_ = this.baseUrl + "/api/Client";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClients(_response);
        });
    }

    protected processGetClients(response: Response): Promise<ClientResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ClientResponse.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClientResponse[]>(<any>null);
    }
}

export class TimesheetClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44306";
    }

    getTimesheets(employeeId: number | undefined): Promise<TimesheetResponse[]> {
        let url_ = this.baseUrl + "/api/Timesheet?";
        if (employeeId === null)
            throw new Error("The parameter 'employeeId' cannot be null.");
        else if (employeeId !== undefined)
            url_ += "employeeId=" + encodeURIComponent("" + employeeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTimesheets(_response);
        });
    }

    protected processGetTimesheets(response: Response): Promise<TimesheetResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TimesheetResponse.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TimesheetResponse[]>(<any>null);
    }

    saveTimesheet(timesheet: TimesheetRequest): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Timesheet";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(timesheet);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveTimesheet(_response);
        });
    }

    protected processSaveTimesheet(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }

    getTimesheet(id: number): Promise<EditTimesheetResponse> {
        let url_ = this.baseUrl + "/api/Timesheet/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTimesheet(_response);
        });
    }

    protected processGetTimesheet(response: Response): Promise<EditTimesheetResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditTimesheetResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EditTimesheetResponse>(<any>null);
    }

    updateTimesheet(timesheet: TimesheetRequest, id: number): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Timesheet/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(timesheet);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTimesheet(_response);
        });
    }

    protected processUpdateTimesheet(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(<any>null);
    }
}

export class ClientResponse implements IClientResponse {
    clientId?: number | undefined;
    name?: string | undefined;

    constructor(data?: IClientResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ClientResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClientResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["name"] = this.name;
        return data; 
    }
}

export interface IClientResponse {
    clientId?: number | undefined;
    name?: string | undefined;
}

export class TimesheetResponse implements ITimesheetResponse {
    timesheetId!: number;
    date!: Date;

    constructor(data?: ITimesheetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timesheetId = _data["timesheetId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TimesheetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TimesheetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timesheetId"] = this.timesheetId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ITimesheetResponse {
    timesheetId: number;
    date: Date;
}

export class EditTimesheetResponse implements IEditTimesheetResponse {
    timesheetId!: number;
    date!: Date;
    employeeId!: number;
    timesheetRows?: TimesheetRowResponse[] | undefined;

    constructor(data?: IEditTimesheetResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timesheetId = _data["timesheetId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.employeeId = _data["employeeId"];
            if (Array.isArray(_data["timesheetRows"])) {
                this.timesheetRows = [] as any;
                for (let item of _data["timesheetRows"])
                    this.timesheetRows!.push(TimesheetRowResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EditTimesheetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EditTimesheetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timesheetId"] = this.timesheetId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["employeeId"] = this.employeeId;
        if (Array.isArray(this.timesheetRows)) {
            data["timesheetRows"] = [];
            for (let item of this.timesheetRows)
                data["timesheetRows"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IEditTimesheetResponse {
    timesheetId: number;
    date: Date;
    employeeId: number;
    timesheetRows?: TimesheetRowResponse[] | undefined;
}

export class TimesheetRowResponse implements ITimesheetRowResponse {
    timesheetRowId?: number | undefined;
    date?: string | undefined;
    clientId!: number;
    clientName?: string | undefined;
    duration!: number;
    notes?: string | undefined;

    constructor(data?: ITimesheetRowResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timesheetRowId = _data["timesheetRowId"];
            this.date = _data["date"];
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.duration = _data["duration"];
            this.notes = _data["notes"];
        }
    }

    static fromJS(data: any): TimesheetRowResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TimesheetRowResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timesheetRowId"] = this.timesheetRowId;
        data["date"] = this.date;
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["duration"] = this.duration;
        data["notes"] = this.notes;
        return data; 
    }
}

export interface ITimesheetRowResponse {
    timesheetRowId?: number | undefined;
    date?: string | undefined;
    clientId: number;
    clientName?: string | undefined;
    duration: number;
    notes?: string | undefined;
}

export class TimesheetRequest implements ITimesheetRequest {
    timesheetId?: number | undefined;
    date!: Date;
    employeeId!: number;
    timesheetRows?: TimesheetRowRequest[] | undefined;

    constructor(data?: ITimesheetRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timesheetId = _data["timesheetId"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.employeeId = _data["employeeId"];
            if (Array.isArray(_data["timesheetRows"])) {
                this.timesheetRows = [] as any;
                for (let item of _data["timesheetRows"])
                    this.timesheetRows!.push(TimesheetRowRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TimesheetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimesheetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timesheetId"] = this.timesheetId;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["employeeId"] = this.employeeId;
        if (Array.isArray(this.timesheetRows)) {
            data["timesheetRows"] = [];
            for (let item of this.timesheetRows)
                data["timesheetRows"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ITimesheetRequest {
    timesheetId?: number | undefined;
    date: Date;
    employeeId: number;
    timesheetRows?: TimesheetRowRequest[] | undefined;
}

export class TimesheetRowRequest implements ITimesheetRowRequest {
    timesheetRowId?: number | undefined;
    date?: string | undefined;
    clientId!: number;
    clientName?: string | undefined;
    duration!: number;
    notes?: string | undefined;
    timesheetId!: number;

    constructor(data?: ITimesheetRowRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timesheetRowId = _data["timesheetRowId"];
            this.date = _data["date"];
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.duration = _data["duration"];
            this.notes = _data["notes"];
            this.timesheetId = _data["timesheetId"];
        }
    }

    static fromJS(data: any): TimesheetRowRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimesheetRowRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timesheetRowId"] = this.timesheetRowId;
        data["date"] = this.date;
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["duration"] = this.duration;
        data["notes"] = this.notes;
        data["timesheetId"] = this.timesheetId;
        return data; 
    }
}

export interface ITimesheetRowRequest {
    timesheetRowId?: number | undefined;
    date?: string | undefined;
    clientId: number;
    clientName?: string | undefined;
    duration: number;
    notes?: string | undefined;
    timesheetId: number;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}